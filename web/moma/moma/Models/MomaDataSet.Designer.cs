//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3082
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Moma.Web.Models {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("MomaDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class MomaDataSet : global::System.Data.DataSet {
        
        private ReportDataTable tableReport;
        
        private MembersDataTable tableMembers;
        
        private ApplicationsDataTable tableApplications;
        
        private ApiUseDataTable tableApiUse;
        
        private PInvokesDataTable tablePInvokes;
        
        private ChartDataDataTable tableChartData;
        
        private ByIssueDataTable tableByIssue;
        
        private ByIssueNoPInvokeDataTable tableByIssueNoPInvoke;
        
        private ByIssueNoTodoDataTable tableByIssueNoTodo;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public MomaDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected MomaDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Report"] != null)) {
                    base.Tables.Add(new ReportDataTable(ds.Tables["Report"]));
                }
                if ((ds.Tables["Members"] != null)) {
                    base.Tables.Add(new MembersDataTable(ds.Tables["Members"]));
                }
                if ((ds.Tables["Applications"] != null)) {
                    base.Tables.Add(new ApplicationsDataTable(ds.Tables["Applications"]));
                }
                if ((ds.Tables["ApiUse"] != null)) {
                    base.Tables.Add(new ApiUseDataTable(ds.Tables["ApiUse"]));
                }
                if ((ds.Tables["PInvokes"] != null)) {
                    base.Tables.Add(new PInvokesDataTable(ds.Tables["PInvokes"]));
                }
                if ((ds.Tables["ChartData"] != null)) {
                    base.Tables.Add(new ChartDataDataTable(ds.Tables["ChartData"]));
                }
                if ((ds.Tables["ByIssue"] != null)) {
                    base.Tables.Add(new ByIssueDataTable(ds.Tables["ByIssue"]));
                }
                if ((ds.Tables["ByIssueNoPInvoke"] != null)) {
                    base.Tables.Add(new ByIssueNoPInvokeDataTable(ds.Tables["ByIssueNoPInvoke"]));
                }
                if ((ds.Tables["ByIssueNoTodo"] != null)) {
                    base.Tables.Add(new ByIssueNoTodoDataTable(ds.Tables["ByIssueNoTodo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ReportDataTable Report {
            get {
                return this.tableReport;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public MembersDataTable Members {
            get {
                return this.tableMembers;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApplicationsDataTable Applications {
            get {
                return this.tableApplications;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ApiUseDataTable ApiUse {
            get {
                return this.tableApiUse;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public PInvokesDataTable PInvokes {
            get {
                return this.tablePInvokes;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ChartDataDataTable ChartData {
            get {
                return this.tableChartData;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ByIssueDataTable ByIssue {
            get {
                return this.tableByIssue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ByIssueNoPInvokeDataTable ByIssueNoPInvoke {
            get {
                return this.tableByIssueNoPInvoke;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ByIssueNoTodoDataTable ByIssueNoTodo {
            get {
                return this.tableByIssueNoTodo;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            MomaDataSet cln = ((MomaDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Report"] != null)) {
                    base.Tables.Add(new ReportDataTable(ds.Tables["Report"]));
                }
                if ((ds.Tables["Members"] != null)) {
                    base.Tables.Add(new MembersDataTable(ds.Tables["Members"]));
                }
                if ((ds.Tables["Applications"] != null)) {
                    base.Tables.Add(new ApplicationsDataTable(ds.Tables["Applications"]));
                }
                if ((ds.Tables["ApiUse"] != null)) {
                    base.Tables.Add(new ApiUseDataTable(ds.Tables["ApiUse"]));
                }
                if ((ds.Tables["PInvokes"] != null)) {
                    base.Tables.Add(new PInvokesDataTable(ds.Tables["PInvokes"]));
                }
                if ((ds.Tables["ChartData"] != null)) {
                    base.Tables.Add(new ChartDataDataTable(ds.Tables["ChartData"]));
                }
                if ((ds.Tables["ByIssue"] != null)) {
                    base.Tables.Add(new ByIssueDataTable(ds.Tables["ByIssue"]));
                }
                if ((ds.Tables["ByIssueNoPInvoke"] != null)) {
                    base.Tables.Add(new ByIssueNoPInvokeDataTable(ds.Tables["ByIssueNoPInvoke"]));
                }
                if ((ds.Tables["ByIssueNoTodo"] != null)) {
                    base.Tables.Add(new ByIssueNoTodoDataTable(ds.Tables["ByIssueNoTodo"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableReport = ((ReportDataTable)(base.Tables["Report"]));
            if ((initTable == true)) {
                if ((this.tableReport != null)) {
                    this.tableReport.InitVars();
                }
            }
            this.tableMembers = ((MembersDataTable)(base.Tables["Members"]));
            if ((initTable == true)) {
                if ((this.tableMembers != null)) {
                    this.tableMembers.InitVars();
                }
            }
            this.tableApplications = ((ApplicationsDataTable)(base.Tables["Applications"]));
            if ((initTable == true)) {
                if ((this.tableApplications != null)) {
                    this.tableApplications.InitVars();
                }
            }
            this.tableApiUse = ((ApiUseDataTable)(base.Tables["ApiUse"]));
            if ((initTable == true)) {
                if ((this.tableApiUse != null)) {
                    this.tableApiUse.InitVars();
                }
            }
            this.tablePInvokes = ((PInvokesDataTable)(base.Tables["PInvokes"]));
            if ((initTable == true)) {
                if ((this.tablePInvokes != null)) {
                    this.tablePInvokes.InitVars();
                }
            }
            this.tableChartData = ((ChartDataDataTable)(base.Tables["ChartData"]));
            if ((initTable == true)) {
                if ((this.tableChartData != null)) {
                    this.tableChartData.InitVars();
                }
            }
            this.tableByIssue = ((ByIssueDataTable)(base.Tables["ByIssue"]));
            if ((initTable == true)) {
                if ((this.tableByIssue != null)) {
                    this.tableByIssue.InitVars();
                }
            }
            this.tableByIssueNoPInvoke = ((ByIssueNoPInvokeDataTable)(base.Tables["ByIssueNoPInvoke"]));
            if ((initTable == true)) {
                if ((this.tableByIssueNoPInvoke != null)) {
                    this.tableByIssueNoPInvoke.InitVars();
                }
            }
            this.tableByIssueNoTodo = ((ByIssueNoTodoDataTable)(base.Tables["ByIssueNoTodo"]));
            if ((initTable == true)) {
                if ((this.tableByIssueNoTodo != null)) {
                    this.tableByIssueNoTodo.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "MomaDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/MomaDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableReport = new ReportDataTable();
            base.Tables.Add(this.tableReport);
            this.tableMembers = new MembersDataTable();
            base.Tables.Add(this.tableMembers);
            this.tableApplications = new ApplicationsDataTable();
            base.Tables.Add(this.tableApplications);
            this.tableApiUse = new ApiUseDataTable();
            base.Tables.Add(this.tableApiUse);
            this.tablePInvokes = new PInvokesDataTable();
            base.Tables.Add(this.tablePInvokes);
            this.tableChartData = new ChartDataDataTable();
            base.Tables.Add(this.tableChartData);
            this.tableByIssue = new ByIssueDataTable();
            base.Tables.Add(this.tableByIssue);
            this.tableByIssueNoPInvoke = new ByIssueNoPInvokeDataTable();
            base.Tables.Add(this.tableByIssueNoPInvoke);
            this.tableByIssueNoTodo = new ByIssueNoTodoDataTable();
            base.Tables.Add(this.tableByIssueNoTodo);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeReport() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeMembers() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeApplications() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeApiUse() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializePInvokes() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeChartData() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeByIssue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeByIssueNoPInvoke() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeByIssueNoTodo() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            MomaDataSet ds = new MomaDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ReportRowChangeEventHandler(object sender, ReportRowChangeEvent e);
        
        public delegate void MembersRowChangeEventHandler(object sender, MembersRowChangeEvent e);
        
        public delegate void ApplicationsRowChangeEventHandler(object sender, ApplicationsRowChangeEvent e);
        
        public delegate void ApiUseRowChangeEventHandler(object sender, ApiUseRowChangeEvent e);
        
        public delegate void PInvokesRowChangeEventHandler(object sender, PInvokesRowChangeEvent e);
        
        public delegate void ChartDataRowChangeEventHandler(object sender, ChartDataRowChangeEvent e);
        
        public delegate void ByIssueRowChangeEventHandler(object sender, ByIssueRowChangeEvent e);
        
        public delegate void ByIssueNoPInvokeRowChangeEventHandler(object sender, ByIssueNoPInvokeRowChangeEvent e);
        
        public delegate void ByIssueNoTodoRowChangeEventHandler(object sender, ByIssueNoTodoRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ReportDataTable : global::System.Data.TypedTableBase<ReportRow> {
            
            private global::System.Data.DataColumn columnPerAppCount;
            
            private global::System.Data.DataColumn columnTotalCount;
            
            private global::System.Data.DataColumn columnAPIName;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportDataTable() {
                this.TableName = "Report";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReportDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ReportDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PerAppCountColumn {
                get {
                    return this.columnPerAppCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCountColumn {
                get {
                    return this.columnTotalCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APINameColumn {
                get {
                    return this.columnAPIName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportRow this[int index] {
                get {
                    return ((ReportRow)(this.Rows[index]));
                }
            }
            
            public event ReportRowChangeEventHandler ReportRowChanging;
            
            public event ReportRowChangeEventHandler ReportRowChanged;
            
            public event ReportRowChangeEventHandler ReportRowDeleting;
            
            public event ReportRowChangeEventHandler ReportRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddReportRow(ReportRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportRow AddReportRow(int PerAppCount, int TotalCount, string APIName) {
                ReportRow rowReportRow = ((ReportRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        PerAppCount,
                        TotalCount,
                        APIName};
                rowReportRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowReportRow);
                return rowReportRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ReportDataTable cln = ((ReportDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ReportDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnPerAppCount = base.Columns["PerAppCount"];
                this.columnTotalCount = base.Columns["TotalCount"];
                this.columnAPIName = base.Columns["APIName"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnPerAppCount = new global::System.Data.DataColumn("PerAppCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPerAppCount);
                this.columnTotalCount = new global::System.Data.DataColumn("TotalCount", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCount);
                this.columnAPIName = new global::System.Data.DataColumn("APIName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPIName);
                this.columnPerAppCount.AllowDBNull = false;
                this.columnPerAppCount.Caption = "Applications";
                this.columnTotalCount.AllowDBNull = false;
                this.columnTotalCount.Caption = "Total uses";
                this.columnAPIName.Caption = "API Name";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportRow NewReportRow() {
                return ((ReportRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ReportRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ReportRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ReportRowChanged != null)) {
                    this.ReportRowChanged(this, new ReportRowChangeEvent(((ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ReportRowChanging != null)) {
                    this.ReportRowChanging(this, new ReportRowChangeEvent(((ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ReportRowDeleted != null)) {
                    this.ReportRowDeleted(this, new ReportRowChangeEvent(((ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ReportRowDeleting != null)) {
                    this.ReportRowDeleting(this, new ReportRowChangeEvent(((ReportRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveReportRow(ReportRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MomaDataSet ds = new MomaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ReportDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class MembersDataTable : global::System.Data.TypedTableBase<MembersRow> {
            
            private global::System.Data.DataColumn columnMemberId;
            
            private global::System.Data.DataColumn columnVersionName;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnIsTodo;
            
            private global::System.Data.DataColumn columnIsMissing;
            
            private global::System.Data.DataColumn columnIsNiex;
            
            private global::System.Data.DataColumn columnIsFixed;
            
            private global::System.Data.DataColumn columnFixedInVersion;
            
            private global::System.Data.DataColumn columnTODOComment;
            
            private global::System.Data.DataColumn columnCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersDataTable() {
                this.TableName = "Members";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MembersDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected MembersDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MemberIdColumn {
                get {
                    return this.columnMemberId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionNameColumn {
                get {
                    return this.columnVersionName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsTodoColumn {
                get {
                    return this.columnIsTodo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsMissingColumn {
                get {
                    return this.columnIsMissing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsNiexColumn {
                get {
                    return this.columnIsNiex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsFixedColumn {
                get {
                    return this.columnIsFixed;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FixedInVersionColumn {
                get {
                    return this.columnFixedInVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TODOCommentColumn {
                get {
                    return this.columnTODOComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountColumn {
                get {
                    return this.columnCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow this[int index] {
                get {
                    return ((MembersRow)(this.Rows[index]));
                }
            }
            
            public event MembersRowChangeEventHandler MembersRowChanging;
            
            public event MembersRowChangeEventHandler MembersRowChanged;
            
            public event MembersRowChangeEventHandler MembersRowDeleting;
            
            public event MembersRowChangeEventHandler MembersRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddMembersRow(MembersRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow AddMembersRow(int MemberId, string VersionName, string Name, bool IsTodo, bool IsMissing, bool IsNiex, bool IsFixed, string FixedInVersion, string TODOComment, int Count) {
                MembersRow rowMembersRow = ((MembersRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        MemberId,
                        VersionName,
                        Name,
                        IsTodo,
                        IsMissing,
                        IsNiex,
                        IsFixed,
                        FixedInVersion,
                        TODOComment,
                        Count};
                rowMembersRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowMembersRow);
                return rowMembersRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                MembersDataTable cln = ((MembersDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new MembersDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnMemberId = base.Columns["MemberId"];
                this.columnVersionName = base.Columns["VersionName"];
                this.columnName = base.Columns["Name"];
                this.columnIsTodo = base.Columns["IsTodo"];
                this.columnIsMissing = base.Columns["IsMissing"];
                this.columnIsNiex = base.Columns["IsNiex"];
                this.columnIsFixed = base.Columns["IsFixed"];
                this.columnFixedInVersion = base.Columns["FixedInVersion"];
                this.columnTODOComment = base.Columns["TODOComment"];
                this.columnCount = base.Columns["Count"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnMemberId = new global::System.Data.DataColumn("MemberId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMemberId);
                this.columnVersionName = new global::System.Data.DataColumn("VersionName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersionName);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnIsTodo = new global::System.Data.DataColumn("IsTodo", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsTodo);
                this.columnIsMissing = new global::System.Data.DataColumn("IsMissing", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsMissing);
                this.columnIsNiex = new global::System.Data.DataColumn("IsNiex", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNiex);
                this.columnIsFixed = new global::System.Data.DataColumn("IsFixed", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsFixed);
                this.columnFixedInVersion = new global::System.Data.DataColumn("FixedInVersion", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFixedInVersion);
                this.columnTODOComment = new global::System.Data.DataColumn("TODOComment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTODOComment);
                this.columnCount = new global::System.Data.DataColumn("Count", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount);
                this.columnVersionName.Caption = "Version";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow NewMembersRow() {
                return ((MembersRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new MembersRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(MembersRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.MembersRowChanged != null)) {
                    this.MembersRowChanged(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.MembersRowChanging != null)) {
                    this.MembersRowChanging(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.MembersRowDeleted != null)) {
                    this.MembersRowDeleted(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.MembersRowDeleting != null)) {
                    this.MembersRowDeleting(this, new MembersRowChangeEvent(((MembersRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveMembersRow(MembersRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MomaDataSet ds = new MomaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "MembersDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ApplicationsDataTable : global::System.Data.TypedTableBase<ApplicationsRow> {
            
            private global::System.Data.DataColumn columnReportId;
            
            private global::System.Data.DataColumn columnSubmitDate;
            
            private global::System.Data.DataColumn columnIP;
            
            private global::System.Data.DataColumn columnDefinitions;
            
            private global::System.Data.DataColumn columnReportedBy;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnOrganization;
            
            private global::System.Data.DataColumn columnHomePage;
            
            private global::System.Data.DataColumn columnComment;
            
            private global::System.Data.DataColumn columnGuid;
            
            private global::System.Data.DataColumn columnTotalMissing;
            
            private global::System.Data.DataColumn columnTotalTodo;
            
            private global::System.Data.DataColumn columnTotalNiex;
            
            private global::System.Data.DataColumn columnTotalPInvoke;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplicationsDataTable() {
                this.TableName = "Applications";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApplicationsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ApplicationsDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportIdColumn {
                get {
                    return this.columnReportId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SubmitDateColumn {
                get {
                    return this.columnSubmitDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IPColumn {
                get {
                    return this.columnIP;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DefinitionsColumn {
                get {
                    return this.columnDefinitions;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReportedByColumn {
                get {
                    return this.columnReportedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OrganizationColumn {
                get {
                    return this.columnOrganization;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HomePageColumn {
                get {
                    return this.columnHomePage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GuidColumn {
                get {
                    return this.columnGuid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalMissingColumn {
                get {
                    return this.columnTotalMissing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalTodoColumn {
                get {
                    return this.columnTotalTodo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalNiexColumn {
                get {
                    return this.columnTotalNiex;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalPInvokeColumn {
                get {
                    return this.columnTotalPInvoke;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplicationsRow this[int index] {
                get {
                    return ((ApplicationsRow)(this.Rows[index]));
                }
            }
            
            public event ApplicationsRowChangeEventHandler ApplicationsRowChanging;
            
            public event ApplicationsRowChangeEventHandler ApplicationsRowChanged;
            
            public event ApplicationsRowChangeEventHandler ApplicationsRowDeleting;
            
            public event ApplicationsRowChangeEventHandler ApplicationsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddApplicationsRow(ApplicationsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplicationsRow AddApplicationsRow(int ReportId, System.DateTime SubmitDate, string IP, string Definitions, string ReportedBy, string Email, string Organization, string HomePage, string Comment, string Guid, int TotalMissing, int TotalTodo, int TotalNiex, int TotalPInvoke) {
                ApplicationsRow rowApplicationsRow = ((ApplicationsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ReportId,
                        SubmitDate,
                        IP,
                        Definitions,
                        ReportedBy,
                        Email,
                        Organization,
                        HomePage,
                        Comment,
                        Guid,
                        TotalMissing,
                        TotalTodo,
                        TotalNiex,
                        TotalPInvoke};
                rowApplicationsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowApplicationsRow);
                return rowApplicationsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ApplicationsDataTable cln = ((ApplicationsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ApplicationsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnReportId = base.Columns["ReportId"];
                this.columnSubmitDate = base.Columns["SubmitDate"];
                this.columnIP = base.Columns["IP"];
                this.columnDefinitions = base.Columns["Definitions"];
                this.columnReportedBy = base.Columns["ReportedBy"];
                this.columnEmail = base.Columns["Email"];
                this.columnOrganization = base.Columns["Organization"];
                this.columnHomePage = base.Columns["HomePage"];
                this.columnComment = base.Columns["Comment"];
                this.columnGuid = base.Columns["Guid"];
                this.columnTotalMissing = base.Columns["TotalMissing"];
                this.columnTotalTodo = base.Columns["TotalTodo"];
                this.columnTotalNiex = base.Columns["TotalNiex"];
                this.columnTotalPInvoke = base.Columns["TotalPInvoke"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnReportId = new global::System.Data.DataColumn("ReportId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportId);
                this.columnSubmitDate = new global::System.Data.DataColumn("SubmitDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSubmitDate);
                this.columnIP = new global::System.Data.DataColumn("IP", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIP);
                this.columnDefinitions = new global::System.Data.DataColumn("Definitions", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDefinitions);
                this.columnReportedBy = new global::System.Data.DataColumn("ReportedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReportedBy);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnOrganization = new global::System.Data.DataColumn("Organization", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOrganization);
                this.columnHomePage = new global::System.Data.DataColumn("HomePage", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHomePage);
                this.columnComment = new global::System.Data.DataColumn("Comment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnGuid = new global::System.Data.DataColumn("Guid", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGuid);
                this.columnTotalMissing = new global::System.Data.DataColumn("TotalMissing", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalMissing);
                this.columnTotalTodo = new global::System.Data.DataColumn("TotalTodo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalTodo);
                this.columnTotalNiex = new global::System.Data.DataColumn("TotalNiex", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalNiex);
                this.columnTotalPInvoke = new global::System.Data.DataColumn("TotalPInvoke", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalPInvoke);
                this.columnReportId.AllowDBNull = false;
                this.columnSubmitDate.AllowDBNull = false;
                this.columnGuid.AllowDBNull = false;
                this.columnTotalMissing.Caption = "Missing";
                this.columnTotalTodo.Caption = "TODO";
                this.columnTotalNiex.Caption = "Not Implemented";
                this.columnTotalPInvoke.Caption = "P/Invoke";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplicationsRow NewApplicationsRow() {
                return ((ApplicationsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ApplicationsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ApplicationsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApplicationsRowChanged != null)) {
                    this.ApplicationsRowChanged(this, new ApplicationsRowChangeEvent(((ApplicationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApplicationsRowChanging != null)) {
                    this.ApplicationsRowChanging(this, new ApplicationsRowChangeEvent(((ApplicationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApplicationsRowDeleted != null)) {
                    this.ApplicationsRowDeleted(this, new ApplicationsRowChangeEvent(((ApplicationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApplicationsRowDeleting != null)) {
                    this.ApplicationsRowDeleting(this, new ApplicationsRowChangeEvent(((ApplicationsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveApplicationsRow(ApplicationsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MomaDataSet ds = new MomaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ApplicationsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ApiUseDataTable : global::System.Data.TypedTableBase<ApiUseRow> {
            
            private global::System.Data.DataColumn columnTotalApps;
            
            private global::System.Data.DataColumn columnTotalCalls;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApiUseDataTable() {
                this.TableName = "ApiUse";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApiUseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ApiUseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalAppsColumn {
                get {
                    return this.columnTotalApps;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalCallsColumn {
                get {
                    return this.columnTotalCalls;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApiUseRow this[int index] {
                get {
                    return ((ApiUseRow)(this.Rows[index]));
                }
            }
            
            public event ApiUseRowChangeEventHandler ApiUseRowChanging;
            
            public event ApiUseRowChangeEventHandler ApiUseRowChanged;
            
            public event ApiUseRowChangeEventHandler ApiUseRowDeleting;
            
            public event ApiUseRowChangeEventHandler ApiUseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddApiUseRow(ApiUseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApiUseRow AddApiUseRow(int TotalApps, int TotalCalls) {
                ApiUseRow rowApiUseRow = ((ApiUseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        TotalApps,
                        TotalCalls};
                rowApiUseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowApiUseRow);
                return rowApiUseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ApiUseDataTable cln = ((ApiUseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ApiUseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTotalApps = base.Columns["TotalApps"];
                this.columnTotalCalls = base.Columns["TotalCalls"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTotalApps = new global::System.Data.DataColumn("TotalApps", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalApps);
                this.columnTotalCalls = new global::System.Data.DataColumn("TotalCalls", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotalCalls);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApiUseRow NewApiUseRow() {
                return ((ApiUseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ApiUseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ApiUseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ApiUseRowChanged != null)) {
                    this.ApiUseRowChanged(this, new ApiUseRowChangeEvent(((ApiUseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ApiUseRowChanging != null)) {
                    this.ApiUseRowChanging(this, new ApiUseRowChangeEvent(((ApiUseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ApiUseRowDeleted != null)) {
                    this.ApiUseRowDeleted(this, new ApiUseRowChangeEvent(((ApiUseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ApiUseRowDeleting != null)) {
                    this.ApiUseRowDeleting(this, new ApiUseRowChangeEvent(((ApiUseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveApiUseRow(ApiUseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MomaDataSet ds = new MomaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ApiUseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class PInvokesDataTable : global::System.Data.TypedTableBase<PInvokesRow> {
            
            private global::System.Data.DataColumn columnLibrary;
            
            private global::System.Data.DataColumn columnFunction;
            
            private global::System.Data.DataColumn columnCount;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PInvokesDataTable() {
                this.TableName = "PInvokes";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PInvokesDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected PInvokesDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LibraryColumn {
                get {
                    return this.columnLibrary;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FunctionColumn {
                get {
                    return this.columnFunction;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CountColumn {
                get {
                    return this.columnCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PInvokesRow this[int index] {
                get {
                    return ((PInvokesRow)(this.Rows[index]));
                }
            }
            
            public event PInvokesRowChangeEventHandler PInvokesRowChanging;
            
            public event PInvokesRowChangeEventHandler PInvokesRowChanged;
            
            public event PInvokesRowChangeEventHandler PInvokesRowDeleting;
            
            public event PInvokesRowChangeEventHandler PInvokesRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddPInvokesRow(PInvokesRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PInvokesRow AddPInvokesRow(string Library, string Function, int Count) {
                PInvokesRow rowPInvokesRow = ((PInvokesRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Library,
                        Function,
                        Count};
                rowPInvokesRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowPInvokesRow);
                return rowPInvokesRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                PInvokesDataTable cln = ((PInvokesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new PInvokesDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLibrary = base.Columns["Library"];
                this.columnFunction = base.Columns["Function"];
                this.columnCount = base.Columns["Count"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLibrary = new global::System.Data.DataColumn("Library", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLibrary);
                this.columnFunction = new global::System.Data.DataColumn("Function", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFunction);
                this.columnCount = new global::System.Data.DataColumn("Count", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCount);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PInvokesRow NewPInvokesRow() {
                return ((PInvokesRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new PInvokesRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(PInvokesRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.PInvokesRowChanged != null)) {
                    this.PInvokesRowChanged(this, new PInvokesRowChangeEvent(((PInvokesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.PInvokesRowChanging != null)) {
                    this.PInvokesRowChanging(this, new PInvokesRowChangeEvent(((PInvokesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.PInvokesRowDeleted != null)) {
                    this.PInvokesRowDeleted(this, new PInvokesRowChangeEvent(((PInvokesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.PInvokesRowDeleting != null)) {
                    this.PInvokesRowDeleting(this, new PInvokesRowChangeEvent(((PInvokesRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovePInvokesRow(PInvokesRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MomaDataSet ds = new MomaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "PInvokesDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ChartDataDataTable : global::System.Data.TypedTableBase<ChartDataRow> {
            
            private global::System.Data.DataColumn columnChartType;
            
            private global::System.Data.DataColumn columnTotal;
            
            private global::System.Data.DataColumn columnMissing;
            
            private global::System.Data.DataColumn columnNIEX;
            
            private global::System.Data.DataColumn columnTODO;
            
            private global::System.Data.DataColumn columnPInvoke;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartDataDataTable() {
                this.TableName = "ChartData";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChartDataDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ChartDataDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChartTypeColumn {
                get {
                    return this.columnChartType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TotalColumn {
                get {
                    return this.columnTotal;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MissingColumn {
                get {
                    return this.columnMissing;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NIEXColumn {
                get {
                    return this.columnNIEX;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TODOColumn {
                get {
                    return this.columnTODO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PInvokeColumn {
                get {
                    return this.columnPInvoke;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartDataRow this[int index] {
                get {
                    return ((ChartDataRow)(this.Rows[index]));
                }
            }
            
            public event ChartDataRowChangeEventHandler ChartDataRowChanging;
            
            public event ChartDataRowChangeEventHandler ChartDataRowChanged;
            
            public event ChartDataRowChangeEventHandler ChartDataRowDeleting;
            
            public event ChartDataRowChangeEventHandler ChartDataRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddChartDataRow(ChartDataRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartDataRow AddChartDataRow(int ChartType, int Total, int Missing, int NIEX, int TODO, int PInvoke) {
                ChartDataRow rowChartDataRow = ((ChartDataRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ChartType,
                        Total,
                        Missing,
                        NIEX,
                        TODO,
                        PInvoke};
                rowChartDataRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowChartDataRow);
                return rowChartDataRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ChartDataDataTable cln = ((ChartDataDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ChartDataDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnChartType = base.Columns["ChartType"];
                this.columnTotal = base.Columns["Total"];
                this.columnMissing = base.Columns["Missing"];
                this.columnNIEX = base.Columns["NIEX"];
                this.columnTODO = base.Columns["TODO"];
                this.columnPInvoke = base.Columns["PInvoke"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnChartType = new global::System.Data.DataColumn("ChartType", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChartType);
                this.columnTotal = new global::System.Data.DataColumn("Total", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTotal);
                this.columnMissing = new global::System.Data.DataColumn("Missing", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMissing);
                this.columnNIEX = new global::System.Data.DataColumn("NIEX", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNIEX);
                this.columnTODO = new global::System.Data.DataColumn("TODO", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTODO);
                this.columnPInvoke = new global::System.Data.DataColumn("PInvoke", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPInvoke);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartDataRow NewChartDataRow() {
                return ((ChartDataRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ChartDataRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ChartDataRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ChartDataRowChanged != null)) {
                    this.ChartDataRowChanged(this, new ChartDataRowChangeEvent(((ChartDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ChartDataRowChanging != null)) {
                    this.ChartDataRowChanging(this, new ChartDataRowChangeEvent(((ChartDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ChartDataRowDeleted != null)) {
                    this.ChartDataRowDeleted(this, new ChartDataRowChangeEvent(((ChartDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ChartDataRowDeleting != null)) {
                    this.ChartDataRowDeleting(this, new ChartDataRowChangeEvent(((ChartDataRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveChartDataRow(ChartDataRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MomaDataSet ds = new MomaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ChartDataDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ByIssueDataTable : global::System.Data.TypedTableBase<ByIssueRow> {
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnApps;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueDataTable() {
                this.TableName = "ByIssue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ByIssueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ByIssueDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppsColumn {
                get {
                    return this.columnApps;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueRow this[int index] {
                get {
                    return ((ByIssueRow)(this.Rows[index]));
                }
            }
            
            public event ByIssueRowChangeEventHandler ByIssueRowChanging;
            
            public event ByIssueRowChangeEventHandler ByIssueRowChanged;
            
            public event ByIssueRowChangeEventHandler ByIssueRowDeleting;
            
            public event ByIssueRowChangeEventHandler ByIssueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddByIssueRow(ByIssueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueRow AddByIssueRow(string Title, int Apps) {
                ByIssueRow rowByIssueRow = ((ByIssueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Title,
                        Apps};
                rowByIssueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowByIssueRow);
                return rowByIssueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ByIssueDataTable cln = ((ByIssueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ByIssueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTitle = base.Columns["Title"];
                this.columnApps = base.Columns["Apps"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnApps = new global::System.Data.DataColumn("Apps", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApps);
                this.columnTitle.AllowDBNull = false;
                this.columnApps.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueRow NewByIssueRow() {
                return ((ByIssueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ByIssueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ByIssueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ByIssueRowChanged != null)) {
                    this.ByIssueRowChanged(this, new ByIssueRowChangeEvent(((ByIssueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ByIssueRowChanging != null)) {
                    this.ByIssueRowChanging(this, new ByIssueRowChangeEvent(((ByIssueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ByIssueRowDeleted != null)) {
                    this.ByIssueRowDeleted(this, new ByIssueRowChangeEvent(((ByIssueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ByIssueRowDeleting != null)) {
                    this.ByIssueRowDeleting(this, new ByIssueRowChangeEvent(((ByIssueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveByIssueRow(ByIssueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MomaDataSet ds = new MomaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ByIssueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ByIssueNoPInvokeDataTable : global::System.Data.TypedTableBase<ByIssueNoPInvokeRow> {
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnApps;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueNoPInvokeDataTable() {
                this.TableName = "ByIssueNoPInvoke";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ByIssueNoPInvokeDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ByIssueNoPInvokeDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppsColumn {
                get {
                    return this.columnApps;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueNoPInvokeRow this[int index] {
                get {
                    return ((ByIssueNoPInvokeRow)(this.Rows[index]));
                }
            }
            
            public event ByIssueNoPInvokeRowChangeEventHandler ByIssueNoPInvokeRowChanging;
            
            public event ByIssueNoPInvokeRowChangeEventHandler ByIssueNoPInvokeRowChanged;
            
            public event ByIssueNoPInvokeRowChangeEventHandler ByIssueNoPInvokeRowDeleting;
            
            public event ByIssueNoPInvokeRowChangeEventHandler ByIssueNoPInvokeRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddByIssueNoPInvokeRow(ByIssueNoPInvokeRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueNoPInvokeRow AddByIssueNoPInvokeRow(string Title, int Apps) {
                ByIssueNoPInvokeRow rowByIssueNoPInvokeRow = ((ByIssueNoPInvokeRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Title,
                        Apps};
                rowByIssueNoPInvokeRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowByIssueNoPInvokeRow);
                return rowByIssueNoPInvokeRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ByIssueNoPInvokeDataTable cln = ((ByIssueNoPInvokeDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ByIssueNoPInvokeDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTitle = base.Columns["Title"];
                this.columnApps = base.Columns["Apps"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnApps = new global::System.Data.DataColumn("Apps", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApps);
                this.columnTitle.AllowDBNull = false;
                this.columnApps.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueNoPInvokeRow NewByIssueNoPInvokeRow() {
                return ((ByIssueNoPInvokeRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ByIssueNoPInvokeRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ByIssueNoPInvokeRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ByIssueNoPInvokeRowChanged != null)) {
                    this.ByIssueNoPInvokeRowChanged(this, new ByIssueNoPInvokeRowChangeEvent(((ByIssueNoPInvokeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ByIssueNoPInvokeRowChanging != null)) {
                    this.ByIssueNoPInvokeRowChanging(this, new ByIssueNoPInvokeRowChangeEvent(((ByIssueNoPInvokeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ByIssueNoPInvokeRowDeleted != null)) {
                    this.ByIssueNoPInvokeRowDeleted(this, new ByIssueNoPInvokeRowChangeEvent(((ByIssueNoPInvokeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ByIssueNoPInvokeRowDeleting != null)) {
                    this.ByIssueNoPInvokeRowDeleting(this, new ByIssueNoPInvokeRowChangeEvent(((ByIssueNoPInvokeRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveByIssueNoPInvokeRow(ByIssueNoPInvokeRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MomaDataSet ds = new MomaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ByIssueNoPInvokeDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ByIssueNoTodoDataTable : global::System.Data.TypedTableBase<ByIssueNoTodoRow> {
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnApps;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueNoTodoDataTable() {
                this.TableName = "ByIssueNoTodo";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ByIssueNoTodoDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ByIssueNoTodoDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AppsColumn {
                get {
                    return this.columnApps;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueNoTodoRow this[int index] {
                get {
                    return ((ByIssueNoTodoRow)(this.Rows[index]));
                }
            }
            
            public event ByIssueNoTodoRowChangeEventHandler ByIssueNoTodoRowChanging;
            
            public event ByIssueNoTodoRowChangeEventHandler ByIssueNoTodoRowChanged;
            
            public event ByIssueNoTodoRowChangeEventHandler ByIssueNoTodoRowDeleting;
            
            public event ByIssueNoTodoRowChangeEventHandler ByIssueNoTodoRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddByIssueNoTodoRow(ByIssueNoTodoRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueNoTodoRow AddByIssueNoTodoRow(string Title, int Apps) {
                ByIssueNoTodoRow rowByIssueNoTodoRow = ((ByIssueNoTodoRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Title,
                        Apps};
                rowByIssueNoTodoRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowByIssueNoTodoRow);
                return rowByIssueNoTodoRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ByIssueNoTodoDataTable cln = ((ByIssueNoTodoDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ByIssueNoTodoDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTitle = base.Columns["Title"];
                this.columnApps = base.Columns["Apps"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnApps = new global::System.Data.DataColumn("Apps", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnApps);
                this.columnTitle.AllowDBNull = false;
                this.columnApps.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueNoTodoRow NewByIssueNoTodoRow() {
                return ((ByIssueNoTodoRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ByIssueNoTodoRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ByIssueNoTodoRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ByIssueNoTodoRowChanged != null)) {
                    this.ByIssueNoTodoRowChanged(this, new ByIssueNoTodoRowChangeEvent(((ByIssueNoTodoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ByIssueNoTodoRowChanging != null)) {
                    this.ByIssueNoTodoRowChanging(this, new ByIssueNoTodoRowChangeEvent(((ByIssueNoTodoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ByIssueNoTodoRowDeleted != null)) {
                    this.ByIssueNoTodoRowDeleted(this, new ByIssueNoTodoRowChangeEvent(((ByIssueNoTodoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ByIssueNoTodoRowDeleting != null)) {
                    this.ByIssueNoTodoRowDeleting(this, new ByIssueNoTodoRowChangeEvent(((ByIssueNoTodoRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveByIssueNoTodoRow(ByIssueNoTodoRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                MomaDataSet ds = new MomaDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ByIssueNoTodoDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ReportRow : global::System.Data.DataRow {
            
            private ReportDataTable tableReport;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ReportRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableReport = ((ReportDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PerAppCount {
                get {
                    return ((int)(this[this.tableReport.PerAppCountColumn]));
                }
                set {
                    this[this.tableReport.PerAppCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalCount {
                get {
                    return ((int)(this[this.tableReport.TotalCountColumn]));
                }
                set {
                    this[this.tableReport.TotalCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APIName {
                get {
                    try {
                        return ((string)(this[this.tableReport.APINameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'APIName\' in table \'Report\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableReport.APINameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAPINameNull() {
                return this.IsNull(this.tableReport.APINameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAPINameNull() {
                this[this.tableReport.APINameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class MembersRow : global::System.Data.DataRow {
            
            private MembersDataTable tableMembers;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal MembersRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableMembers = ((MembersDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MemberId {
                get {
                    try {
                        return ((int)(this[this.tableMembers.MemberIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MemberId\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.MemberIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VersionName {
                get {
                    try {
                        return ((string)(this[this.tableMembers.VersionNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VersionName\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.VersionNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableMembers.NameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Name\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTodo {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsTodoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsTodo\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsTodoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMissing {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsMissingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsMissing\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsMissingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNiex {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsNiexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsNiex\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsNiexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFixed {
                get {
                    try {
                        return ((bool)(this[this.tableMembers.IsFixedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsFixed\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.IsFixedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FixedInVersion {
                get {
                    try {
                        return ((string)(this[this.tableMembers.FixedInVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FixedInVersion\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.FixedInVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TODOComment {
                get {
                    try {
                        return ((string)(this[this.tableMembers.TODOCommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TODOComment\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.TODOCommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    try {
                        return ((int)(this[this.tableMembers.CountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Count\' in table \'Members\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableMembers.CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMemberIdNull() {
                return this.IsNull(this.tableMembers.MemberIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMemberIdNull() {
                this[this.tableMembers.MemberIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVersionNameNull() {
                return this.IsNull(this.tableMembers.VersionNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVersionNameNull() {
                this[this.tableMembers.VersionNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableMembers.NameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableMembers.NameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsTodoNull() {
                return this.IsNull(this.tableMembers.IsTodoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsTodoNull() {
                this[this.tableMembers.IsTodoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsMissingNull() {
                return this.IsNull(this.tableMembers.IsMissingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsMissingNull() {
                this[this.tableMembers.IsMissingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsNiexNull() {
                return this.IsNull(this.tableMembers.IsNiexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsNiexNull() {
                this[this.tableMembers.IsNiexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsFixedNull() {
                return this.IsNull(this.tableMembers.IsFixedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsFixedNull() {
                this[this.tableMembers.IsFixedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFixedInVersionNull() {
                return this.IsNull(this.tableMembers.FixedInVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFixedInVersionNull() {
                this[this.tableMembers.FixedInVersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTODOCommentNull() {
                return this.IsNull(this.tableMembers.TODOCommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTODOCommentNull() {
                this[this.tableMembers.TODOCommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountNull() {
                return this.IsNull(this.tableMembers.CountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountNull() {
                this[this.tableMembers.CountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ApplicationsRow : global::System.Data.DataRow {
            
            private ApplicationsDataTable tableApplications;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApplicationsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableApplications = ((ApplicationsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ReportId {
                get {
                    return ((int)(this[this.tableApplications.ReportIdColumn]));
                }
                set {
                    this[this.tableApplications.ReportIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SubmitDate {
                get {
                    return ((global::System.DateTime)(this[this.tableApplications.SubmitDateColumn]));
                }
                set {
                    this[this.tableApplications.SubmitDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string IP {
                get {
                    try {
                        return ((string)(this[this.tableApplications.IPColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IP\' in table \'Applications\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplications.IPColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Definitions {
                get {
                    try {
                        return ((string)(this[this.tableApplications.DefinitionsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Definitions\' in table \'Applications\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplications.DefinitionsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ReportedBy {
                get {
                    try {
                        return ((string)(this[this.tableApplications.ReportedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReportedBy\' in table \'Applications\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplications.ReportedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableApplications.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'Applications\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplications.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Organization {
                get {
                    try {
                        return ((string)(this[this.tableApplications.OrganizationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Organization\' in table \'Applications\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplications.OrganizationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HomePage {
                get {
                    try {
                        return ((string)(this[this.tableApplications.HomePageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HomePage\' in table \'Applications\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplications.HomePageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableApplications.CommentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Comment\' in table \'Applications\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplications.CommentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Guid {
                get {
                    return ((string)(this[this.tableApplications.GuidColumn]));
                }
                set {
                    this[this.tableApplications.GuidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalMissing {
                get {
                    try {
                        return ((int)(this[this.tableApplications.TotalMissingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalMissing\' in table \'Applications\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplications.TotalMissingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalTodo {
                get {
                    try {
                        return ((int)(this[this.tableApplications.TotalTodoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalTodo\' in table \'Applications\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplications.TotalTodoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalNiex {
                get {
                    try {
                        return ((int)(this[this.tableApplications.TotalNiexColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalNiex\' in table \'Applications\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplications.TotalNiexColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalPInvoke {
                get {
                    try {
                        return ((int)(this[this.tableApplications.TotalPInvokeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalPInvoke\' in table \'Applications\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableApplications.TotalPInvokeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIPNull() {
                return this.IsNull(this.tableApplications.IPColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIPNull() {
                this[this.tableApplications.IPColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDefinitionsNull() {
                return this.IsNull(this.tableApplications.DefinitionsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDefinitionsNull() {
                this[this.tableApplications.DefinitionsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReportedByNull() {
                return this.IsNull(this.tableApplications.ReportedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReportedByNull() {
                this[this.tableApplications.ReportedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableApplications.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableApplications.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOrganizationNull() {
                return this.IsNull(this.tableApplications.OrganizationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOrganizationNull() {
                this[this.tableApplications.OrganizationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHomePageNull() {
                return this.IsNull(this.tableApplications.HomePageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHomePageNull() {
                this[this.tableApplications.HomePageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableApplications.CommentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableApplications.CommentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalMissingNull() {
                return this.IsNull(this.tableApplications.TotalMissingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalMissingNull() {
                this[this.tableApplications.TotalMissingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalTodoNull() {
                return this.IsNull(this.tableApplications.TotalTodoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalTodoNull() {
                this[this.tableApplications.TotalTodoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNiexNull() {
                return this.IsNull(this.tableApplications.TotalNiexColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNiexNull() {
                this[this.tableApplications.TotalNiexColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalPInvokeNull() {
                return this.IsNull(this.tableApplications.TotalPInvokeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalPInvokeNull() {
                this[this.tableApplications.TotalPInvokeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ApiUseRow : global::System.Data.DataRow {
            
            private ApiUseDataTable tableApiUse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ApiUseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableApiUse = ((ApiUseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalApps {
                get {
                    try {
                        return ((int)(this[this.tableApiUse.TotalAppsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalApps\' in table \'ApiUse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableApiUse.TotalAppsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TotalCalls {
                get {
                    try {
                        return ((int)(this[this.tableApiUse.TotalCallsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TotalCalls\' in table \'ApiUse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableApiUse.TotalCallsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalAppsNull() {
                return this.IsNull(this.tableApiUse.TotalAppsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalAppsNull() {
                this[this.tableApiUse.TotalAppsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalCallsNull() {
                return this.IsNull(this.tableApiUse.TotalCallsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalCallsNull() {
                this[this.tableApiUse.TotalCallsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class PInvokesRow : global::System.Data.DataRow {
            
            private PInvokesDataTable tablePInvokes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal PInvokesRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablePInvokes = ((PInvokesDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Library {
                get {
                    try {
                        return ((string)(this[this.tablePInvokes.LibraryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Library\' in table \'PInvokes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePInvokes.LibraryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Function {
                get {
                    try {
                        return ((string)(this[this.tablePInvokes.FunctionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Function\' in table \'PInvokes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePInvokes.FunctionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    try {
                        return ((int)(this[this.tablePInvokes.CountColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Count\' in table \'PInvokes\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablePInvokes.CountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLibraryNull() {
                return this.IsNull(this.tablePInvokes.LibraryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLibraryNull() {
                this[this.tablePInvokes.LibraryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFunctionNull() {
                return this.IsNull(this.tablePInvokes.FunctionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFunctionNull() {
                this[this.tablePInvokes.FunctionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCountNull() {
                return this.IsNull(this.tablePInvokes.CountColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCountNull() {
                this[this.tablePInvokes.CountColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ChartDataRow : global::System.Data.DataRow {
            
            private ChartDataDataTable tableChartData;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ChartDataRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableChartData = ((ChartDataDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ChartType {
                get {
                    try {
                        return ((int)(this[this.tableChartData.ChartTypeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ChartType\' in table \'ChartData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChartData.ChartTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Total {
                get {
                    try {
                        return ((int)(this[this.tableChartData.TotalColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Total\' in table \'ChartData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChartData.TotalColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Missing {
                get {
                    try {
                        return ((int)(this[this.tableChartData.MissingColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Missing\' in table \'ChartData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChartData.MissingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NIEX {
                get {
                    try {
                        return ((int)(this[this.tableChartData.NIEXColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NIEX\' in table \'ChartData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChartData.NIEXColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int TODO {
                get {
                    try {
                        return ((int)(this[this.tableChartData.TODOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TODO\' in table \'ChartData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChartData.TODOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PInvoke {
                get {
                    try {
                        return ((int)(this[this.tableChartData.PInvokeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PInvoke\' in table \'ChartData\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableChartData.PInvokeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChartTypeNull() {
                return this.IsNull(this.tableChartData.ChartTypeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChartTypeNull() {
                this[this.tableChartData.ChartTypeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTotalNull() {
                return this.IsNull(this.tableChartData.TotalColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTotalNull() {
                this[this.tableChartData.TotalColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMissingNull() {
                return this.IsNull(this.tableChartData.MissingColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMissingNull() {
                this[this.tableChartData.MissingColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNIEXNull() {
                return this.IsNull(this.tableChartData.NIEXColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNIEXNull() {
                this[this.tableChartData.NIEXColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTODONull() {
                return this.IsNull(this.tableChartData.TODOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTODONull() {
                this[this.tableChartData.TODOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPInvokeNull() {
                return this.IsNull(this.tableChartData.PInvokeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPInvokeNull() {
                this[this.tableChartData.PInvokeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ByIssueRow : global::System.Data.DataRow {
            
            private ByIssueDataTable tableByIssue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ByIssueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableByIssue = ((ByIssueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableByIssue.TitleColumn]));
                }
                set {
                    this[this.tableByIssue.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Apps {
                get {
                    return ((int)(this[this.tableByIssue.AppsColumn]));
                }
                set {
                    this[this.tableByIssue.AppsColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ByIssueNoPInvokeRow : global::System.Data.DataRow {
            
            private ByIssueNoPInvokeDataTable tableByIssueNoPInvoke;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ByIssueNoPInvokeRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableByIssueNoPInvoke = ((ByIssueNoPInvokeDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableByIssueNoPInvoke.TitleColumn]));
                }
                set {
                    this[this.tableByIssueNoPInvoke.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Apps {
                get {
                    return ((int)(this[this.tableByIssueNoPInvoke.AppsColumn]));
                }
                set {
                    this[this.tableByIssueNoPInvoke.AppsColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ByIssueNoTodoRow : global::System.Data.DataRow {
            
            private ByIssueNoTodoDataTable tableByIssueNoTodo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ByIssueNoTodoRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableByIssueNoTodo = ((ByIssueNoTodoDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableByIssueNoTodo.TitleColumn]));
                }
                set {
                    this[this.tableByIssueNoTodo.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Apps {
                get {
                    return ((int)(this[this.tableByIssueNoTodo.AppsColumn]));
                }
                set {
                    this[this.tableByIssueNoTodo.AppsColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ReportRowChangeEvent : global::System.EventArgs {
            
            private ReportRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportRowChangeEvent(ReportRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ReportRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class MembersRowChangeEvent : global::System.EventArgs {
            
            private MembersRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRowChangeEvent(MembersRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public MembersRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ApplicationsRowChangeEvent : global::System.EventArgs {
            
            private ApplicationsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplicationsRowChangeEvent(ApplicationsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApplicationsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ApiUseRowChangeEvent : global::System.EventArgs {
            
            private ApiUseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApiUseRowChangeEvent(ApiUseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ApiUseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class PInvokesRowChangeEvent : global::System.EventArgs {
            
            private PInvokesRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PInvokesRowChangeEvent(PInvokesRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public PInvokesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ChartDataRowChangeEvent : global::System.EventArgs {
            
            private ChartDataRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartDataRowChangeEvent(ChartDataRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ChartDataRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ByIssueRowChangeEvent : global::System.EventArgs {
            
            private ByIssueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueRowChangeEvent(ByIssueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ByIssueNoPInvokeRowChangeEvent : global::System.EventArgs {
            
            private ByIssueNoPInvokeRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueNoPInvokeRowChangeEvent(ByIssueNoPInvokeRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueNoPInvokeRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ByIssueNoTodoRowChangeEvent : global::System.EventArgs {
            
            private ByIssueNoTodoRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueNoTodoRowChangeEvent(ByIssueNoTodoRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ByIssueNoTodoRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591